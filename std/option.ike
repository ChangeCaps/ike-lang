type option 'a = some 'a | none

fn option::assert : option 'a -> 'a
fn option::assert -> option::expect "option was none"

fn option::expect : str -> option 'a -> 'a
fn option::expect msg opt {
  match opt {
    some a -> a
    none   -> panic msg
  }
}

fn option::map : ('a -> 'b) -> option 'a -> option 'b
fn option::map f opt {
  match opt {
    some a -> some (f a)
    none   -> none
  }
}

fn option::some-or : 'a -> option 'a -> 'a
fn option::some-or a opt {
  match opt {
    some a -> a
    none   -> a
  }
}

fn option::ok-or : option 'a  -> 'e -> result 'a 'e  
fn option::ok-or opt e {
  match opt {
    some x -> ok x
    none   -> err e
  }
}

fn option::or-else : ({} -> option 'a) -> option 'a -> option 'a
fn option::or-else f opt {
  match opt {
    some a -> some a
    none   -> (f {})
  }
}

fn option::is-some-and : ('a -> bool) -> option 'a -> bool
fn option::is-some-and f opt {
  match opt {
    some a -> f a
    none   -> false
  }
}
 
fn option::is-none-or : ('a -> bool) -> option 'a -> bool
fn option::is-none-or f opt {
  match opt {
    some a -> f a
    none   -> true
  }
}
