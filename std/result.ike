type result<'a, 'e> = ok 'a | err 'e

fn result::try : result<'a, 'e> -> ('a -> result<'b, 'e>) -> result<'b, 'e>
fn result::try r f {
  match r {
    ok v  -> f v
    err e -> err e
  }
}

fn result::map : ('a -> 'b) -> result<'a, 'e> -> result<'b, 'e>
fn result::map f r {
  match r {
    ok v  -> ok (f v)
    err e -> err e
  }
}

fn result::ok-or : 'a -> result<'a, 'e>  -> 'a
fn result::ok-or d r {
  match r {
    ok v  -> v
    err _ -> d
  }
}
