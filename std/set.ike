alias set 'k = map 'k {}

fn set : set 'k
fn set -> map

fn set::len : set 'k -> int
fn set::len -> map::len

fn set::put : 'k -> set 'k -> set 'k
fn set::put key set { map::put key {} set }

fn set::has : 'k -> set 'k -> bool
fn set::has key set -> map::has key set

fn set::remove : 'k -> set 'k -> set 'k
fn set::remove key set -> map::remove key set

fn set::list : set 'k -> ['k]
fn set::list set -> map::list set |> list::map |k, _| k

fn set::union : set 'k -> set 'k -> set 'k
fn set::union a b -> set::list a |> list::foldr b set::put

fn set::difference : set 'k -> set 'k -> set 'k
fn set::difference a b {
  set::list b
    |> list::foldl a |acc key| {
      match set::has key a {
        true  -> set::remove key acc
        false -> set::put key acc
      }
    }
}
