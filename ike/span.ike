import std::list
import std::string
import std::none
import std::some

type file = {
  path:    str
  content: str
}

type span = {
  file: file
  lo:   int
  hi:   int
}

fn span::join a b {
  std::assert (a.file == b.file) "Cannot join spans from different sources"

  span {
    file: a.file
    lo:   math::min a.lo b.lo 
    hi:   math::max a.hi b.hi 
  }
}

fn span::line : span -> int
fn span::line s {
  let n, _ = s.file.content 
  |> string::split "\n"
  |> list::foldl (1, 0) \n, start line -> {
    let end = start + string::length line + 1

    match end >= s.lo {
      true  -> n, end
      false -> n + 1, end
    }
  }

  n 
}

fn span::column : span -> option<int * str>
fn span::column s {
  let n, _ = s.file.content 
  |> string::split "\n"
  |> list::foldl (none, 0) \n, start line -> {
    let end = start + string::length line + 1

    match s.lo >= start && s.lo < end {
      true  -> some (start, line), end
      false -> n, end
    }
  }

  n
}

fn span::content : span -> str
fn span::content s {
  string::sub s.lo s.hi s.file.content
}
