import std::math
import std::option
import std::none
import std::some
import std::string
import std::debug
import std::list

type diagnostic = {
  color:   color
  level:   str
  message: str
  labels:  [diagnostic::label]
}

type diagnostic::label = {
  message: option<str>
  span:    span
}

fn diagnostic::error : str -> diagnostic
fn diagnostic::error message {
  diagnostic {
    color:   red
    level:   "error"
    message: message
    labels:  []
  }
}

fn diagnostic::warning : str -> diagnostic
fn diagnostic::warning message {
  diagnostic {
    color:   yellow
    level:   "warning"
    message: message
    labels:  []
  }
}

fn diagnostic::info : str -> diagnostic
fn diagnostic::info message {
  diagnostic {
    color:   blue
    level:   "info"
    message: message
    labels:  []
  }
}

fn diagnostic::with-span : span -> diagnostic -> diagnostic
fn diagnostic::with-span span diagnostic {
  let label = diagnostic::label {
    message: none
    span: span
  }

  diagnostic {
    color:   diagnostic.color
    level:   diagnostic.level
    message: diagnostic.message
    labels:  [label; ..diagnostic.labels]
  }
}

fn diagnostic::with-label : span -> str -> diagnostic -> diagnostic
fn diagnostic::with-label span message diagnostic {
  let label = diagnostic::label {
    message: some message
    span: span
  }

  diagnostic {
    color:   diagnostic.color
    level:   diagnostic.level
    message: diagnostic.message
    labels:  [label; ..diagnostic.labels]
  }
}

fn diagnostic::format : diagnostic -> str
fn diagnostic::format diagnostic {
  let indent = diagnostic.labels
    |> list::map \l -> span::line l.span
    |> list::foldl 0 math::max
    |> debug::format
    |> string::length

  let labels = diagnostic::format-labels
    <| diagnostic.labels
    <| diagnostic.color
    <| indent

  diagnostic::format-header diagnostic
  |> string::append "\n"
  |> string::append labels
}

fn diagnostic::format-header diagnostic {
  diagnostic.level
  |> colorize diagnostic.color |> bold
  |> string::append <| bold ":"
  |> string::append <| " "
  |> string::append <| bold diagnostic.message
}

fn diagnostic::format-labels labels color indent {
  match labels {
    []                -> ""
    [label; ..labels] -> {
      diagnostic::format-label label color indent
      |> string::append <| diagnostic::format-labels labels color indent
    }
  }
}

fn diagnostic::format-label label color indent {
  let line = span::line label.span
  let start, s = span::column label.span |> option::assert
  let column = label.span.lo - start

  string::repeat indent " "
  |> string::append <| colorize blue "-->"
  |> string::append <| " "
  |> string::append <| label.span.file.path
  |> string::append <| ":"
  |> string::append <| debug::format line
  |> string::append <| ":"
  |> string::append <| debug::format column
  |> string::append <| "\n"
  |> string::append <| string::repeat (indent + 1) " "
  |> string::append <| colorize blue "|\n"
  |> string::append <| colorize blue (debug::format line)
  |> string::append <| " "
  |> string::append <| colorize blue "|"
  |> string::append <| " "
  |> string::append <| s
  |> string::append <| "\n"
  |> string::append <| string::repeat (indent + 1) " "
  |> string::append <| colorize blue "|"
  |> string::append <| string::repeat column " "
  |> string::append <| colorize color (string::repeat (label.span.hi - label.span.lo) "^")
  |> string::append <| " " 
  |> string::append <| colorize color (option::some-or "" label.message)
  |> string::append <| "\n"
}

fn diagnostic::format-indent indent {
  match indent == 0 {
    true  -> ""
    false -> diagnostic::format-indent (indent - 1) |> string::append " "
  }
}
