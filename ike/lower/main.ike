import std::some
import std::none
import std::list
import std::option
import std::assert
import std::map
import std::string

import ike::ast
import ike::ir
import ike::ir::uir
import ike::diagnostic
import ike::parse::token

type lcx = {
  uir:         uir::program
  diagnostics: [diagnostic]
}

fn lcx : lcx
fn lcx {
  lcx {
    uir:         uir::program
    diagnostics: []
  }
}

fn lcx::with-diagnostic diagnostic lcx {
  lcx with {
    diagnostics: [diagnostic; ..lcx.diagnostics]
  }
}

fn lcx::fresh-var generic lcx {
  let var, tcx = uir::tcx::fresh-var generic lcx.uir.tcx
  let lcx = lcx with {
    uir: lcx.uir with {
      tcx: tcx
    }
  }

  var, lcx
}

fn lcx::get-module mod-id name lcx {
  lcx.uir
    |> uir::program::module mod-id
    |> uir::module::get-module name
}

fn lcx::get-body mod-id name lcx {
  lcx.uir
    |> uir::program::module mod-id
    |> uir::module::get-body name
}

fn lcx::get-type mod-id name lcx {
  lcx.uir
    |> uir::program::module mod-id
    |> uir::module::get-type name
}

fn lower : lcx -> uir::program, [diagnostic]
fn lower lcx {
  lcx
    |> lower::import-root-modules
}

fn lower::import-root-modules lcx {
  std::todo "{lcx}" 
}
