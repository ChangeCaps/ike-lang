import ike::diagnostic

import std::map
import std::set
import std::option

type tcx = {
  records: map int record
  unions:  map int union
  aliases: map int alias  
  bounds:  map int bounds
  subst:   map int type
  cache:   set (type, type)
  errors:  [diagnostic]
}

type bounds = {
  number: bool
  fields: map str type
}

alias generics = [str, var, span]

type record = {
  path:     [str]
  generics: generics
  fields:   [str, type]
  span:     span
}

type union = {
  path:     [str]
  generics: generics
  variants: [str, option type]
  span:     span
}

type alias = {
  path:     [str]
  generics: generics
  type:     type
  span:     span
}

type record::id = { index: int }
type union::id  = { index: int }
type alias::id  = { index: int }

fn tcx : tcx
fn tcx {
  tcx {
    records: map
    unions:  map
    aliases: map
    bounds:  map
    subst:   map
    cache:   set
    errors:  []
  }
}

fn tcx::add-record : record -> tcx -> record::id, tcx
fn tcx::add-record record tcx {
  let index = map::len tcx.records
  let tcx = tcx with {
    records: map::put index record tcx.records
  }

  record::id { index: index }, tcx
}

fn tcx::add-union : union -> tcx -> union::id, tcx
fn tcx::add-union union tcx {
  let index = map::len tcx.unions
  let tcx = tcx with {
    unions:  map::put index union tcx.unions
  }

  union::id { index: index }, tcx
}

fn tcx::add-alias : alias -> tcx -> alias::id, tcx
fn tcx::add-alias alias tcx {
  let index = map::len tcx.aliases
  let tcx = tcx with {
    aliases: map::put index alias tcx.aliases
  }

  alias::id { index: index }, tcx
}

fn tcx::record : record::id -> tcx -> record
fn tcx::record id tcx {
  tcx.records
    |> map::get id.index
    |> option::expect "malformed record::id"
}

fn tcx::union : union::id -> tcx -> union
fn tcx::union id tcx {
  tcx.unions
    |> map::get id.index
    |> option::expect "malformed union::id"
}

fn tcx::alias : alias::id -> tcx -> alias
fn tcx::alias id tcx {
  tcx.aliases
    |> map::get id.index
    |> option::expect "malformed alias::id"
}

fn tcx::set-bounds : var -> bounds -> tcx -> tcx
fn tcx::set-bounds var bounds tcx {
  let bounds = tcx.bounds
    |> map::put var.index bounds

  tcx with { bounds: bounds }
}

fn tcx::bounds : var -> tcx -> bounds
fn tcx::bounds var tcx {
  tcx.bounds
    |> map::get var.index
    |> option::some-or bounds::default
}

fn tcx::add-subst : var -> type -> tcx -> tcx
fn tcx::add-subst var type tcx {
  let subst = tcx.subst
    |> map::put var.index type

  tcx with { subst: subst }
}

fn tcx::subst : var -> tcx -> option type
fn tcx::subst var tcx -> map::get var.index tcx.subst

fn tcx::cache : type -> type -> tcx -> tcx
fn tcx::cache lhs rhs tcx {
  let cache = tcx.cache
    |> set::put (lhs, rhs)

  tcx with { cache: cache }
}

fn tcx::cached : type -> type -> tcx -> bool
fn tcx::cached lhs rhs tcx -> set::has (lhs, rhs) tcx.cache

fn tcx::error : diagnostic -> tcx -> tcx
fn tcx::error diagnostic tcx {
  tcx with {
    errors: [diagnostic; ..tcx.errors]
  }
}

fn tcx::fresh-var : bool -> tcx -> var, tcx
fn tcx::fresh-var generic tcx {
  let index = map::len tcx.bounds
  let tcx = tcx with {
    bounds: map::put index bounds::default tcx.bounds
  }

  let var = var {
    index:   index
    generic: generic
  }

  var, tcx
}

fn bounds::default : bounds
fn bounds::default {
  bounds {
    number: false
    fields: map
  }
}
