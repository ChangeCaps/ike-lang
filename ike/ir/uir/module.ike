import std::map

type module = {
  modules:  map str module::id
  types:    map str module::type
  bodies:   map str body::id
  variants: map str (union::id, int)
  imports:  map str [str]
}

type module::id = {
  index: int
}

type module::type = union union::id
                  | record record::id
                  | alias alias::id

fn module::root : module::id
fn module::root -> module::id { index: 0 }

fn module : module
fn module {
  module {
    modules:  map
    types:    map
    bodies:   map
    variants: map
    imports:  map
  }
}

fn module::get-module name module -> map::get name module.modules
fn module::put-module name id module {
  let modules = module.modules
    |> map::put name id

  module with { modules: modules }
}

fn module::get-body name module -> map::get name module.bodies
fn module::put-body name id module {
  let bodies = module.bodies
    |> map::put name id

  module with { bodies: bodies }
}
