import std::map

type module = {
  modules:  map str module::id
  types:    map str module::type
  bodies:   map str body::id
  variants: map str (union::id, int)
}

type module::id = {
  index: int
}

type module::type = union union::id
                  | record record::id
                  | alias alias::id

fn module::root : module::id
fn module::root -> module::id { index: 0 }

fn module : module
fn module {
  module {
    modules:  map
    types:    map
    bodies:   map
    variants: map
  }
}

fn module::get-module name module -> map::get name module.modules
fn module::put-module name id module {
  module with {
    modules: map::put name id module.modules
  }
}

fn module::get-type name module -> map::get name module.types
fn module::put-type name id module {
  module with {
    types: map::put name id module.types
  }
}

fn module::get-variant name module -> map::get name module.variants
fn module::put-variant name id module {
  module with {
    variants: map::put name id module.variants
  }
}

fn module::get-body name module -> map::get name module.bodies
fn module::put-body name id module {
  module with {
    bodies: map::put name id module.bodies
  }
}

fn module::debug-format -> module::debug-format' 0 "root"

fn module::debug-format' indent name mod-id program {
  let i = string::repeat indent "  "

  let module = program::module mod-id program

  let modules = module.modules
    |> map::list
    |> list::map |name, mod-id| {
      module::debug-format' (indent + 1) name mod-id program
    }
    |> string::join ""

  let types = module.types
    |> map::list
    |> list::map |name, type| "{i}  {name} => {type}\n"
    |> string::join ""

  let bodies = module.bodies
    |> map::list
    |> list::map |name, body| "{i}  {name} => {body}\n"
    |> string::join ""

  let variants = module.variants
    |> map::list
    |> list::map |name, variant| "{i}  {name} => {variant}\n"
    |> string::join ""

  "{i}{name}:\n{i} types:\n{types}{i} bodies:\n{bodies}{i} variants:\n{variants}{i} modules:\n{modules}"
}
