import std::map
import std::option

import ike::ir

alias body = ir::body type
alias local = ir::local type

alias body::id = ir::body::id type
alias local::id = ir::local::id type

alias expr = ir::expr type
alias pattern = ir::pattern type

type record::id = { index: int }
type union::id = { index: int }

type program = {
  bodies:  map int body
  records: map int record
  unions:  map int union
}

type record = {
  name:     str
  generics: [type]
  fields:   [str, type]
}

type union = {
  name:     str
  generics: [type]
  variants: [variant]
}

type variant = {
  name: str
  body: option type
}

fn program {
  program {
    bodies:  map
    records: map
    unions:  map
  }
}

fn add-body : body -> program -> body::id, program
fn add-body body program {
  let index = map::len program.bodies

  let program = program with {
    bodies: map::put index body program.bodies
  }

  ir::body::id { index: index }, program
}

fn set-body : body::id -> body -> program -> program
fn set-body body-id body program {
  program with {
    bodies: map::put body-id.index body program.bodies
  }
}

fn add-record : record -> program -> record::id, program
fn add-record record program {
  let index = map::len program.records

  let program = program with {
    records: map::put index record program.records
  }

  record::id { index: index }, program
}

fn set-record : record::id -> record -> program -> program
fn set-record record-id record program {
  program with {
    records: map::put record-id.index record program.records
  }
}

fn set-union : union::id -> union -> program -> program
fn set-union union-id union program {
  program with {
    unions: map::put union-id.index union program.unions
  }
}

fn add-union : union -> program -> union::id, program
fn add-union union program {
  let index = map::len program.unions

  let program = program with {
    unions: map::put index union program.unions
  }

  union::id { index: index }, program
}

fn body : body::id -> program -> body
fn body body-id program {
  program.bodies
    |> map::get body-id.index
    |> option::assert
}

fn record : record::id -> program -> record
fn record record-id program {
  program.records
    |> map::get record-id.index
    |> option::assert
}

fn union : union::id -> program -> union
fn union union-id program {
  program.unions
    |> map::get union-id.index
    |> option::assert
}
