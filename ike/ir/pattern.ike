import std::option

type pattern 'type = {
  kind: pattern::kind 'type
  span: span
}

type pattern::kind 'type = wildcard
                         | binding local::id 'type
                         | tuple [pattern 'type]
                         | integer int
                         | boolean bool
                         | string str
                         | variant pattern::variant 'type

type pattern::variant 'type = {
  type:  'type
  index: int
  body:  option (pattern 'type)
}

fn pattern::is-refutable pattern {
  match pattern.kind {
    pattern::wildcard -> false
    pattern::binding  -> false
    pattern::tuple    -> true
    pattern::integer  -> true
    pattern::boolean  -> true
    pattern::string   -> true
    pattern::variant  -> true
  }
}
