import std::option
import std::list

type pattern 'type = {
  kind: pattern::kind 'type
  span: span
}

type pattern::kind 'type = wildcard
                         | binding local::id 'type
                         | tuple [pattern 'type]
                         | integer str
                         | boolean bool
                         | string str
                         | variant pattern::variant 'type
                         | list-empty
                         | list-cons pattern 'type, pattern 'type

type pattern::variant 'type = {
  type:  'type
  index: int
  body:  option (pattern 'type)
}

fn pattern::is-refutable pattern {
  match pattern.kind {
    pattern::wildcard    -> false
    pattern::binding     -> false
    pattern::tuple items -> list::any pattern::is-refutable items
    pattern::integer     -> true
    pattern::boolean     -> true
    pattern::string      -> true
    pattern::variant     -> true
    pattern::list-empty  -> true
    pattern::list-cons   -> true
  }
}
