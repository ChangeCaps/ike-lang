import std::panic

import ike::ast
import ike::span
import ike::diagnostic

type parser = {
  tokens: [token * span]
}

fn parser::new : [token * span] -> parser
fn parser::new tokens -> parser { tokens: tokens }

fn parser::peek : parser -> token * span
fn parser::peek parser {
  match parser.tokens {
    [whitespace, _; ..tokens] -> parser::peek (parser::new tokens)
    [t, s; .._]               -> (t, s)
    []                        -> panic "unreachable"
  }
}

/// Advances the parser by one token.
fn parser::advance : parser -> parser
fn parser::advance parser {
  match parser.tokens {
    [eof,        _; .._     ] -> parser
    [whitespace, _; ..tokens] -> parser::advance (parser::new tokens)
    [_,          _; ..tokens] -> parser::new tokens
    []                        -> panic "unreachable"
  }
}

fn parser::expect : token -> parser -> result<span, diagnostic>
fn parser::expect token parser {
  let (t, span) = parser::peek parser

  match t == token {
    true  -> ok span
    false -> {
      let message = "expected `"
        |> string::append <| debug::format token
        |> string::append "`, found `"
        |> string::append <| debug::format t
        |> string::append "`"

      diagnostic::error message
      |> diagnostic::with-label span "found here"
      |> err
    }
  }
}
