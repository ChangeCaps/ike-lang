import std::string
import std::debug
import std::result

import ike::ast
import ike::span
import ike::diagnostic

fn expr::term parser {
  let token, span = parser::peek parser

  match token {
    number n -> {
      let expr = ast::expr {
        kind: ast::expr::number n
        span: span
      }

      ok (expr, parser::advance parser)
    }

    lparen -> {
      parser::advance parser |> expr
      |> result::try \expr, parser -> {
        parser::expect rparen parser
        |> result::try \span, parser -> {
          let expr = ast::expr {
            kind: ast::expr::grouped expr
            span: span::join span expr.span
          }

          ok (expr, parser)
        }
      }
    }

    _ -> {
      let message = "expected an expression, found `"
        |> string::append <| debug::format token
        |> string::append "`"

      diagnostic::error message
      |> diagnostic::with-label span "found here"
      |> err
    }
  }
}

fn expr::binary-precedence op {
  match op {
    ast::expr::add -> 1
    ast::expr::sub -> 1

    ast::expr::mul -> 2
    ast::expr::div -> 2
    ast::expr::mod -> 2
  }
}

fn expr::binary' lhs op parser {
  expr::binary (parser::advance parser)
  |> result::try \rhs, parser -> {
    match rhs.kind {
      ast::expr::binary (op', lhs', rhs') -> {
        match (expr::binary-precedence op) >= (expr::binary-precedence op') {
          true -> {
            let lhs = ast::expr {
              kind: ast::expr::binary (op, lhs, lhs')
              span: span::join lhs.span lhs'.span
            }

            let expr = ast::expr {
              kind: ast::expr::binary (op', lhs, rhs')
              span: span::join lhs.span rhs'.span
            }

            ok (expr, parser)
          }

          false -> {
            let expr = ast::expr {
              kind: ast::expr::binary (op, lhs, rhs)
              span: span::join lhs.span rhs.span
            }

            ok (expr, parser)
          }
        }

      }

      _ -> {
        let expr = ast::expr {
          kind: ast::expr::binary (op, lhs, rhs)
          span: span::join lhs.span rhs.span
        }

        ok (expr, parser)
      }
    }
  }
}

fn expr::binary parser {
  expr::term parser
  |> result::try \lhs, parser -> {
    let token, span = parser::peek parser

    match token {
      plus    -> expr::binary' lhs ast::expr::add parser
      minus   -> expr::binary' lhs ast::expr::sub parser

      star    -> expr::binary' lhs ast::expr::mul parser
      slash   -> expr::binary' lhs ast::expr::div parser
      percent -> expr::binary' lhs ast::expr::mod parser

      _ -> ok (lhs, parser)
    }
  }
}

fn expr : parser -> result<ast::expr * parser, diagnostic>
fn expr parser -> expr::binary parser
